#include<bits/stdc++.h>
#define rep(i,n) for(ll i=0; i< (n); i++)
#define mkp(i,j) make_pair((i),(j))
#define EPS (1e-10)
using namespace std;
typedef long long  ll;
typedef pair<ll,ll> Pe;
ll mod = 998244353;
ll inf = (1ull<<50);


struct Point{

    double x,y;
    Point(){}
    Point(double x,double y):x(x),y(y){};
    Point operator+(Point p) {return Point(x+p.x,y+p.y);}
    Point operator-(Point p) {return Point(x-p.x,y-p.y);}
    Point operator*(double p) {return Point(x*p,y*p);}
    Point operator+(double p) {return Point(x/p,y/p);}
    double norm(){return x*x+y*y;}
    double abs(){return sqrt(norm());}

};

struct Segment{

    Point p1,p2;
    Segment(){}
    Segment(Point p1, Point p2):p1(p1),p2(p2){}
};
typedef Segment Line;
typedef Point Vector;


double dot(Vector a,Vector b){
    return a.x*b.x + a.y*b.y;
}
double cross(Vector a,Vector b){
    return a.x*b.y - a.y*b.x;
}

Point project(Segment s,Point p){
    Vector base = s.p2 - s.p1;
    double r = dot(p-s.p1,base)/base.norm();
    return s.p1+(base*r);

}

Point reflect(Segment s,Point p){
    return p+(project(s,p)-p)*2.0;
}

int ccw(Point p0,Point p1, Point p2){
    Vector a = p1 - p0;
    Vector b = p2 - p0;

    if(cross(a,b) > EPS) return 0;
    if(cross(a,b) < -EPS) return 1;
    if(dot(a,b) < -EPS) return 2;
    if(a.norm() < b.norm()) return 3;
    return 4;
}
typedef vector<Point> polygon;




int main(){
    Point p0,p1;
    cin>>p0.x>>p0.y>>p1.x>>p1.y;
    int q; cin>>q;

    rep(i,q){
        Point p;
        cin>>p.x>>p.y;

        int ans = ccw(p0,p1,p);

        if(ans == 0) cout<<"COUNTER_CLOCKWISE"<<endl;
        else if(ans == 1) cout<<"CLOCKWISE"<<endl;
        else if(ans == 2) cout<<"ONLINE_BACK"<<endl;
        else if(ans == 3) cout<<"ONLINE_FRONT"<<endl;
        else cout<<"ON_SEGMENT"<<endl;




        //cout<<fixed<<setprecision(10)<<ans.x<<" "<<ans.y<<endl;
        


    }
}
    
    
